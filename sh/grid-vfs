// @vertex
layout(location = 0) in vec3 position;

uniform vec4 u_color;
uniform mat4 u_view;
uniform mat4 u_projection;
uniform mat4 transform;

out vec4 v_color;
out vec2 fragCoord;
out vec3 v_position;

void main()
{
    v_color = u_color;
    fragCoord = position.xy;
    gl_Position = transform * u_projection * u_view * vec4(position, 1.0);
}
// @end

// @fragment
in vec2 fragCoord;
out vec4 fragColor;

in vec2 v_resolution;
in vec4 v_color;

const float PI = 3.1415926535897932384626433832795;
const vec2 CANVAS_SIZE = vec2(2);

vec2 convert_to_cell_coords(vec2 coord, vec2 grid);

float lineWidth = 0.01;
vec2 grid = vec2(16);
vec2 cellSize = CANVAS_SIZE / grid;

void main()
{
    vec2 cellCoord = convert_to_cell_coords(fragCoord, cellSize);
    vec2 cutoff = convert_to_cell_coords(vec2(1.0 - lineWidth), cellSize);

    vec2 alpha = step(cutoff, cellCoord);
    if (max(alpha.x, alpha.y) == 0.0)
        discard;

    fragColor = v_color;
}

vec2 convert_to_cell_coords(vec2 coord, vec2 cellSize)
{
    return cos(((2 * PI) / cellSize) * coord);
}
// @end
